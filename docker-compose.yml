version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: company_scraper_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-company_scraper}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_config/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - scraper_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend_api
      dockerfile: Dockerfile
    container_name: company_scraper_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@database:5432/${POSTGRES_DB:-company_scraper}
      - ENVIRONMENT=production
    volumes:
      - ./config.json:/app/config.json:ro
      - ./database_config/.env:/app/database_config/.env:ro
      - backend_logs:/app/logs
      - file_uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - scraper_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: company_scraper_frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - scraper_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: company_scraper_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - scraper_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  file_uploads:
    driver: local

networks:
  scraper_network:
    driver: bridge