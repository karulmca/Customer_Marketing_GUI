version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: company_scraper_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database_config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - scraper_network_prod
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend_api
      dockerfile: Dockerfile
    container_name: company_scraper_backend_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./config.json:/app/config.json:ro
      - ./database_config/.env:/app/database_config/.env:ro
      - backend_logs_prod:/app/logs
      - file_uploads_prod:/app/uploads
    depends_on:
      database:
        condition: service_healthy
    networks:
      - scraper_network_prod
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Frontend with SSL
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: company_scraper_frontend_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - scraper_network_prod
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:443"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Redis for production caching
  redis:
    image: redis:7-alpine
    container_name: company_scraper_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - scraper_network_prod
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  backend_logs_prod:
    driver: local
  file_uploads_prod:
    driver: local

networks:
  scraper_network_prod:
    driver: bridge